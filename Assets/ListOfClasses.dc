from DistributedObjects.DLevelManager/AI import DLevelManager/AI
from DistributedObjects.DLevel/AI import DLevel/AI
from DistributedObjects.DPlayer/AI import DPlayer/AI
from DistributedObjects.DCherry/AI import DCherry/AI
from DistributedObjects.DActor/AI import DActor/AI


struct PlayerInput {
    int16 move_x/10000;
    int16 move_y/10000;
    int16 move_z/10000;
    uint8 jump;
}

struct JoinParameters {
    uint32 level_zone;
    uint32 level_id;
    uint32 player_id;
}

dclass DLevelManager: DistributedObject {
    request_join(uint8 max_players) p2p;
    request_leave(uint32 level_id, uint32 player_id) p2p;
    request_quit() p2p;
    join_success(JoinParameters params) p2p;
    left_success() p2p;
};

dclass DLevel: DistributedNode {
    generate_cherries() p2p;
    request_start() p2p;
    start_level() broadcast;
};

dclass DActor: DistributedNode {
    play(string anim) broadcast;
    loop(string anim) broadcast;
    stop() broadcast;
}

dclass DPlayer: DActor {
    set_ready() p2p;
    send_input(PlayerInput p_input) p2p;
    set_model(string path) broadcast;
    set_model_hpr(int16 % 360 / 10, int16 % 360 / 10, int16 % 360 / 10) clsend broadcast;
};

dclass DCherry: DistributedNode {
    request_pos() p2p;
};
